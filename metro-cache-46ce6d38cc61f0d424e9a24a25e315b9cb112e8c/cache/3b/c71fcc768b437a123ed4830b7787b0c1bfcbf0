__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/home/justdial/Projects/AwesomeProject/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactLifecyclesCompat = _require(_dependencyMap[3], "react-lifecycles-compat");

  var _createTabNavigator = _require(_dependencyMap[4], "../utils/createTabNavigator");

  var _createTabNavigator2 = _interopRequireDefault(_createTabNavigator);

  var _BottomTabBar = _require(_dependencyMap[5], "../views/BottomTabBar");

  var _BottomTabBar2 = _interopRequireDefault(_BottomTabBar);

  var _ResourceSavingScene = _require(_dependencyMap[6], "../views/ResourceSavingScene");

  var _ResourceSavingScene2 = _interopRequireDefault(_ResourceSavingScene);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TabNavigationView: {
      displayName: "TabNavigationView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/justdial/Projects/AwesomeProject/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var TabNavigationView = _wrapComponent("TabNavigationView")((_temp2 = _class = function (_React$PureComponent) {
    _inherits(TabNavigationView, _React$PureComponent);

    function TabNavigationView() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, TabNavigationView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TabNavigationView.__proto__ || Object.getPrototypeOf(TabNavigationView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        loaded: [_this.props.navigation.state.index]
      }, _this._getLabel = function (_ref2) {
        var route = _ref2.route,
            focused = _ref2.focused,
            tintColor = _ref2.tintColor;

        var label = _this.props.getLabelText({
          route: route
        });

        if (typeof label === 'function') {
          return label({
            focused: focused,
            tintColor: tintColor
          });
        }

        return label;
      }, _this._renderTabBar = function () {
        var _this$props = _this.props,
            _this$props$tabBarCom = _this$props.tabBarComponent,
            TabBarComponent = _this$props$tabBarCom === undefined ? _BottomTabBar2.default : _this$props$tabBarCom,
            tabBarOptions = _this$props.tabBarOptions,
            navigation = _this$props.navigation,
            screenProps = _this$props.screenProps,
            getLabelText = _this$props.getLabelText,
            getAccessibilityLabel = _this$props.getAccessibilityLabel,
            getButtonComponent = _this$props.getButtonComponent,
            getTestID = _this$props.getTestID,
            renderIcon = _this$props.renderIcon,
            onTabPress = _this$props.onTabPress;
        var descriptors = _this.props.descriptors;
        var state = _this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarVisible === false) {
          return null;
        }

        return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {
          jumpTo: _this._jumpTo,
          navigation: navigation,
          screenProps: screenProps,
          onTabPress: onTabPress,
          getLabelText: getLabelText,
          getButtonComponent: getButtonComponent,
          getAccessibilityLabel: getAccessibilityLabel,
          getTestID: getTestID,
          renderIcon: renderIcon,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        }));
      }, _this._jumpTo = function (key) {
        var _this$props2 = _this.props,
            navigation = _this$props2.navigation,
            onIndexChange = _this$props2.onIndexChange;
        var index = navigation.state.routes.findIndex(function (route) {
          return route.key === key;
        });
        onIndexChange(index);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TabNavigationView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            navigation = _props.navigation,
            renderScene = _props.renderScene,
            lazy = _props.lazy;
        var routes = navigation.state.routes;
        var loaded = this.state.loaded;
        return React.createElement(
          _reactNative.View,
          {
            style: styles.container,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          },
          React.createElement(
            _reactNative.View,
            {
              style: styles.pages,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 77
              }
            },
            routes.map(function (route, index) {
              if (lazy && !loaded.includes(index)) {
                return null;
              }

              var isFocused = navigation.state.index === index;
              return React.createElement(
                _ResourceSavingScene2.default,
                {
                  key: route.key,
                  style: [_reactNative.StyleSheet.absoluteFill, {
                    opacity: isFocused ? 1 : 0
                  }],
                  isFocused: isFocused,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 86
                  }
                },
                renderScene({
                  route: route
                })
              );
            })
          ),
          this._renderTabBar()
        );
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        var index = nextProps.navigation.state.index;
        return {
          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])
        };
      }
    }]);

    return TabNavigationView;
  }(React.PureComponent), _class.defaultProps = {
    lazy: true
  }, _temp2));

  (0, _reactLifecyclesCompat.polyfill)(TabNavigationView);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      overflow: 'hidden'
    },
    pages: {
      flex: 1
    }
  });

  exports.default = (0, _createTabNavigator2.default)(TabNavigationView);
});