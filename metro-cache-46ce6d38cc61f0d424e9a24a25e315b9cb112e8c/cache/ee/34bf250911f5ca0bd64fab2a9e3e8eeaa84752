__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/home/justdial/Projects/AwesomeProject/node_modules/react-navigation-tabs/dist/navigators/createMaterialTopTabNavigator.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactNativeTabView = _require(_dependencyMap[3], "react-native-tab-view");

  var _createTabNavigator = _require(_dependencyMap[4], "../utils/createTabNavigator");

  var _createTabNavigator2 = _interopRequireDefault(_createTabNavigator);

  var _MaterialTopTabBar = _require(_dependencyMap[5], "../views/MaterialTopTabBar");

  var _MaterialTopTabBar2 = _interopRequireDefault(_MaterialTopTabBar);

  var _ResourceSavingScene = _require(_dependencyMap[6], "../views/ResourceSavingScene");

  var _ResourceSavingScene2 = _interopRequireDefault(_ResourceSavingScene);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    MaterialTabView: {
      displayName: "MaterialTabView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/justdial/Projects/AwesomeProject/node_modules/react-navigation-tabs/dist/navigators/createMaterialTopTabNavigator.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var MaterialTabView = _wrapComponent("MaterialTabView")((_temp2 = _class = function (_React$PureComponent) {
    _inherits(MaterialTabView, _React$PureComponent);

    function MaterialTabView() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, MaterialTabView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MaterialTabView.__proto__ || Object.getPrototypeOf(MaterialTabView)).call.apply(_ref, [this].concat(args))), _this), _this._getLabel = function (_ref2) {
        var route = _ref2.route,
            tintColor = _ref2.tintColor,
            focused = _ref2.focused;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarLabel) {
          return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarLabel;
        }

        if (typeof options.title === 'string') {
          return options.title;
        }

        return route.routeName;
      }, _this._renderIcon = function (_ref3) {
        var focused = _ref3.focused,
            route = _ref3.route,
            tintColor = _ref3.tintColor;
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;

        if (options.tabBarIcon) {
          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({
            tintColor: tintColor,
            focused: focused
          }) : options.tabBarIcon;
        }

        return null;
      }, _this._renderTabBar = function (props) {
        var state = _this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = _this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;
        var _this$props = _this.props,
            _this$props$tabBarCom = _this$props.tabBarComponent,
            TabBarComponent = _this$props$tabBarCom === undefined ? _MaterialTopTabBar2.default : _this$props$tabBarCom,
            tabBarPosition = _this$props.tabBarPosition,
            tabBarOptions = _this$props.tabBarOptions;

        if (TabBarComponent === null || !tabBarVisible) {
          return null;
        }

        return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {
          tabBarPosition: tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabelText: _this.props.getLabelText,
          getAccessibilityLabel: _this.props.getAccessibilityLabel,
          getTestID: _this.props.getTestID,
          renderIcon: _this._renderIcon,
          onTabPress: _this.props.onTabPress,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65
          }
        }));
      }, _this._renderPanPager = function (props) {
        return React.createElement(_reactNativeTabView.PagerPan, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        }));
      }, _this._renderScene = function (_ref4) {
        var route = _ref4.route;
        var _this$props2 = _this.props,
            renderScene = _this$props2.renderScene,
            animationEnabled = _this$props2.animationEnabled,
            swipeEnabled = _this$props2.swipeEnabled,
            descriptors = _this$props2.descriptors;

        if (animationEnabled === false && swipeEnabled === false) {
          var navigation = descriptors[route.key].navigation;
          return React.createElement(
            _ResourceSavingScene2.default,
            {
              isFocused: navigation.isFocused(),
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            },
            renderScene({
              route: route
            })
          );
        }

        return renderScene({
          route: route
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(MaterialTabView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            navigation = _props.navigation,
            animationEnabled = _props.animationEnabled,
            renderScene = _props.renderScene,
            rest = _objectWithoutProperties(_props, ["navigation", "animationEnabled", "renderScene"]);

        var renderPager = void 0;
        var state = this.props.navigation.state;
        var route = state.routes[state.index];
        var descriptors = this.props.descriptors;
        var descriptor = descriptors[route.key];
        var options = descriptor.options;
        var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;

        if (typeof swipeEnabled === 'function') {
          swipeEnabled = swipeEnabled(state);
        }

        if (animationEnabled === false && swipeEnabled === false) {
          renderPager = this._renderPanPager;
        }

        return React.createElement(_reactNativeTabView.TabView, _extends({}, rest, {
          navigationState: navigation.state,
          animationEnabled: animationEnabled,
          swipeEnabled: swipeEnabled,
          renderPager: renderPager,
          renderTabBar: this._renderTabBar,
          renderScene: this._renderScene,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 117
          }
        }));
      }
    }]);

    return MaterialTabView;
  }(React.PureComponent), _class.defaultProps = {
    initialLayout: _reactNative.Platform.select({
      android: {
        width: 1,
        height: 0
      }
    })
  }, _temp2));

  exports.default = (0, _createTabNavigator2.default)(MaterialTabView);
});