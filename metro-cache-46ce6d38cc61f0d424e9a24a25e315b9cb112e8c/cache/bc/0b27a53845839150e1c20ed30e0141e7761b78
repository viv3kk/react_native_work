__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _getChildEventSubscriber = _require(_dependencyMap[0], "./getChildEventSubscriber");

  var _getChildEventSubscriber2 = _interopRequireDefault(_getChildEventSubscriber);

  var _getChildRouter = _require(_dependencyMap[1], "./getChildRouter");

  var _getChildRouter2 = _interopRequireDefault(_getChildRouter);

  var _invariant = _require(_dependencyMap[2], "./utils/invariant");

  var _invariant2 = _interopRequireDefault(_invariant);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var createParamGetter = function createParamGetter(route) {
    return function (paramName, defaultValue) {
      var params = route.params;

      if (params && paramName in params) {
        return params[paramName];
      }

      return defaultValue;
    };
  };

  function _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {
    var children = navigation._childrenNavigation || (navigation._childrenNavigation = {});
    var childRoute = navigation.state.routes.find(function (r) {
      return r.key === childKey;
    });

    if (children[childKey] && children[childKey].state === childRoute) {
      return children[childKey];
    }

    var childRouter = (0, _getChildRouter2.default)(navigation.router, childRoute.routeName);
    var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;

    var actionCreators = _extends({}, navigation.actions, navigation.router.getActionCreators(childRoute, navigation.state.key), childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {});

    var actionHelpers = {};
    Object.keys(actionCreators).forEach(function (actionName) {
      actionHelpers[actionName] = function () {
        var actionCreator = actionCreators[actionName];
        var action = actionCreator.apply(undefined, arguments);
        return navigation.dispatch(action);
      };
    });

    if (children[childKey]) {
      children[childKey] = _extends({}, children[childKey], actionHelpers, {
        state: childRoute,
        router: childRouter,
        actions: actionCreators,
        getParam: createParamGetter(childRoute)
      });
      return children[childKey];
    }

    var childSubscriber = (0, _getChildEventSubscriber2.default)(navigation.addListener, childKey);
    children[childKey] = _extends({}, actionHelpers, {
      state: childRoute,
      router: childRouter,
      actions: actionCreators,
      getParam: createParamGetter(childRoute),
      getChildNavigation: function getChildNavigation(grandChildKey) {
        return _getChildNavigation(children[childKey], grandChildKey, function () {
          return getCurrentParentNavigation().getChildNavigation(childKey);
        });
      },
      isFocused: function isFocused() {
        var currentNavigation = getCurrentParentNavigation();
        var _currentNavigation$st = currentNavigation.state,
            routes = _currentNavigation$st.routes,
            index = _currentNavigation$st.index;

        if (!currentNavigation.isFocused()) {
          return false;
        }

        if (routes[index].key === childKey) {
          return true;
        }

        return false;
      },
      dispatch: navigation.dispatch,
      getScreenProps: navigation.getScreenProps,
      dangerouslyGetParent: getCurrentParentNavigation,
      addListener: childSubscriber.addListener
    });
    return children[childKey];
  }

  exports.default = _getChildNavigation;
});